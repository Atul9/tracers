//! * This file automatically generated by {{env!("CARGO_PKG_NAME")}} {{env!("CARGO_PKG_VERSION")}}.  Do not edit
//!  this file.
//!
//!  This file contains native wrappers for the probes defined in trait {{spec.ident()}}.
//!
//!  The source code for that trait is:
//!
//!  ```no_execute
//!  {{spec.token_stream().to_string()}}
//!  ```
{{ spec.vis_str() }} mod __{{ spec.name_with_hash() }} {
    #[link(name = "{{spec.name_with_hash()}}")]
    extern "C" {
    {% for probe_spec in spec.probes() %}

        /// A C++ function which fires the `{{spec.name()}}` probe `{{probe_spec.name}}`
        ///
        /// The C++ declaration of this function is:
        ///
        /// ```cpp
        /// extern "C" void {{spec.name_with_hash()}}_{{probe_spec.name}}({%for arg in probe_spec.args %}{{ arg.arg_type_info().get_c_type_str() }} {{ arg.name() }}{% if !loop.last %}, {% endif %}{%endfor%})
        /// ```
        #[link(name = "{{spec.name_with_hash()}}_{{probe_spec.name}}")]
        pub fn {{probe_spec.name}}(
            {%for arg in probe_spec.args %}{{ arg.name() }}: {{ arg.arg_type_info().get_rust_type_str() }} {% if !loop.last %}, {% endif %}{%endfor%}
        );

        /// The semaphore which will be incremented if the probe is enabled
        #[link(name = "{{spec.name()}}_{{probe_spec.name}}_semaphore")]
        #[link_section = ".probes"]
        pub static {{probe_spec.name}}_semaphore: u16;

    {% endfor %}
    }
}
