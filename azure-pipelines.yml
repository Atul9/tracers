# This pipeline stolen shamelessly from https://github.com/nickbabcock/rrinlog
trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

jobs:
  - job: 'Rustfmt'
    pool:
      vmImage: 'ubuntu-16.04'
    container: 'rust:latest'
    condition: eq(variables['Build.Reason'], 'PullRequest')
    steps:
      - script: rustup component add rustfmt
        displayName: Install Rustfmt
      - script: cargo fmt --all -- --check
        displayName: Run fmt

  - job: 'Test'
    strategy:
      matrix:
        windows-stable:
          imageName: 'vs2017-win2016'
          rustup_toolchain: stable
        mac-stable:
          imageName: 'macos-10.13'
          rustup_toolchain: stable
        linux-stable:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: stable
        linux-beta:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: beta
        linux-nightly:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: nightly
    pool:
      vmImage: $(imageName)
    steps:
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: Install rust (non-Windows)
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - script: |
            curl -sSf -o rustup-init.exe https://win.rustup.rs
            rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
            echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: Install rust (Windows)
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - script: sudo apt-get update && sudo apt-get install build-essential m4
        displayName: install Ubuntu dependencies
        condition: eq( variables['Agent.OS'], 'Linux' )

      - script: scripts/build.sh --release -vv
        displayName: Cargo build (non-Windows)
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - script: scripts\build.bat --release -vv
        displayName: Cargo build (Windows)
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - script: scripts/test.sh --release -vv
        displayName: Cargo test (non-Windows)
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - script: scripts\test.bat --release -vv
        displayName: Cargo test (Windows)
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - script: TRACERS_EXPECTED_IMPL=dyn_stap scripts/test.sh --manifest-path tracers/Cargo.toml --no-default-features --features=enable-dynamic-tracing -vv
        displayName: Cargo test SystemTap implementation (Linux)
        condition: eq( variables['Agent.OS'], 'Linux' )

      - script: TRACERS_EXPECTED_IMPL=DISABLED scripts/test.sh --manifest-path tracers/Cargo.toml
        displayName: Cargo test default Native NoOp implementation (Linux)
        condition: eq( variables['Agent.OS'], 'Linux' )

      - script: TRACERS_EXPECTED_IMPL=DISABLED scripts/test.sh --manifest-path tracers/Cargo.toml --no-default-features -vv
        displayName: Cargo test tracing disabled (non-Windows)
        condition: eq( variables['Agent.OS'], 'Linux' )

      - script: |
          echo ##vso[task.setvariable variable=TRACERS_EXPECTED_IMPL;]DISABLED
          scripts\test.bat --manifest-path tracers/Cargo.toml --no-default-features -vv
        displayName: Cargo test tracing disabled (Windows)
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - script: TRACERS_EXPECTED_IMPL=DISABLED scripts/test.sh -vv
        displayName: Cargo test default Native NoOp implementation (non-Windows)
        condition: and(ne( variables['Agent.OS'], 'Windows_NT' ), ne( variables['Agent.OS'], 'Linux' ))

      - script: |
          echo ##vso[task.setvariable variable=TRACERS_EXPECTED_IMPL;]no-op
          scripts\test.bat -vv
        displayName: Cargo test default Native NoOp implementation (Windows)
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      # NB: Currently running with `--all-targets` causes a ICE due to this issue:
      # https://github.com/rust-lang/rust-clippy/issues/3741
      #
      # Once it's fixed, put back `--all-targets --all-features` because otherwise clippy isn't running against tests
      - script: rustup component add clippy && cargo clippy  -- -D warnings
        displayName: Run Clippy linter on Rust code (only on Rust stable)
        condition:  eq( variables['rustup_toolchain'], 'stable' )

